// <auto-generated />
using Broker.Accounts.Infrastructure.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Broker.Accounts.Infrastructure.SQL.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20230416042303_InitAccount")]
    partial class InitAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountIssuerSchema", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id")
                        .HasColumnOrder(1);

                    b.Property<string>("IssuerName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Issuer_Name")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("Share_Price");

                    b.Property<int>("TotalShares")
                        .HasColumnType("int")
                        .HasColumnName("Total_Shares");

                    b.HasKey("UserId", "IssuerName");

                    b.ToTable("ACCOUNT_ISSUER");
                });

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountOrderSchema", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id")
                        .HasColumnOrder(1);

                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_Id")
                        .HasColumnOrder(2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Issuer_Name");

                    b.Property<int>("Operation")
                        .HasMaxLength(15)
                        .HasColumnType("int")
                        .HasColumnName("Operation");

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("Share_Price");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("Date");

                    b.Property<int>("TotalShares")
                        .HasColumnType("int")
                        .HasColumnName("Total_Shares");

                    b.HasKey("UserId", "OrderId");

                    b.ToTable("ACCOUNT_ORDER");
                });

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountSchema", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("Balance");

                    b.HasKey("UserId");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountIssuerSchema", b =>
                {
                    b.HasOne("Broker.Accounts.Infrastructure.SQL.Schemas.AccountSchema", "Account")
                        .WithMany("Issuers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountOrderSchema", b =>
                {
                    b.HasOne("Broker.Accounts.Infrastructure.SQL.Schemas.AccountSchema", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Broker.Accounts.Infrastructure.SQL.Schemas.AccountSchema", b =>
                {
                    b.Navigation("Issuers");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
